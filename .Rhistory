library(dplyr)
library(eventstudyr)
library(stargazer)
library(ggplot2)
df <- read.csv('data/incidence_with_policy_new.csv')
df$percent_change <- c(diff(df$weekly_cases) / lag(df$weekly_cases) * 100)
df$percent_change[is.nan(df$percent_change) | is.infinite(df$percent_change)] <- 0
df$date <- as.Date(df$date, format = "%Y-%m-%d")
df <- filter(df, as.Date('2021/04/01') <= df$date & df$date <= as.Date('2021/07/01'))
df$days <- as.numeric(difftime(df$date, as.Date('2020/01/01')))
df$brake_applies <- as.numeric(df$brake_applies)
df$day <- weekdays(as.Date(df$date))
# Make buckets for incidence
bucket_start <- 10
bucket_size <- 5
get_bucket <- function(inc){
if (inc <= bucket_start){return(0)}
else{return(ceiling((inc - bucket_start) / bucket_size))}
}
df$bucket_inc <- lapply(df$weekly_inc, get_bucket) %>%
as.numeric()
length(unique(df$bucket_inc))
# Make buckets for days
bucket_start <- 0
bucket_size <- 1
df$bucket_day <- lapply(df$days, get_bucket) %>%
as.numeric()
df$bucket_day_inc <- df$bucket_day * 1000 + df$bucket_inc
length(unique(df$bucket_day))
length(unique(df$bucket_day_inc))
# Make buckets for incidence
bucket_start <- 2
bucket_size <- 5
get_bucket <- function(inc){
if (inc <= bucket_start){return(0)}
else{return(ceiling((inc - bucket_start) / bucket_size))}
}
df$bucket_inc <- lapply(df$weekly_inc, get_bucket) %>%
as.numeric()
length(unique(df$bucket_inc))
# Make buckets for days
bucket_start <- 0
bucket_size <- 1
df$bucket_day <- lapply(df$days, get_bucket) %>%
as.numeric()
df$bucket_day_inc <- df$bucket_day * 1000 + df$bucket_inc
length(unique(df$bucket_day))
length(unique(df$bucket_day_inc))
model_1 <- lm(percent_change ~ factor(id) + factor(bucket_day_inc) + brake_applies, data=df)
bucket_size <- 10
bucket_start <- ceiling((100-bucket_size/2)%%bucket_size)
df$bucket_inc <- lapply(df$weekly_inc, get_bucket) %>%
as.numeric()
df$bucket_day_inc <- df$bucket_day * 1000 + df$bucket_inc
length(unique(df$bucket_day_inc))
model_2 <- lm(percent_change ~ factor(id) + factor(bucket_day_inc) + brake_applies, data=df)
stargazer(model_1, model_2, type='text', keep='brake_applies')
length(unique(df$bucket_day_inc))
# Make buckets for incidence
bucket_start <- 60
bucket_size <- 80
get_bucket <- function(inc){
if (inc <= bucket_start){return(0)}
else{return(ceiling((inc - bucket_start) / bucket_size))}
}
df$bucket_inc <- lapply(df$weekly_inc, get_bucket) %>%
as.numeric()
length(unique(df$bucket_inc))
df$bucket_day_inc <- df$days * 1000 + df$bucket_inc
length(unique(df$bucket_day))
length(unique(df$bucket_day_inc))
library(minpack.lm)
install.packages(minpack)
install.packages(minpack.lm)
install.packages("minpack.lm")
model <- nls(percent_change ~ a*weekly_incidence + b*brake_applies,
start = c(0, 0),
algorithm = "port")
model <- nls(percent_change ~ a*weekly_incidence + b*brake_applies,
start = c(0, 0),
algorithm = "port")
model <- nls(percent_change ~ a*weekly_incidence + b*brake_applies,
start = c(0, 0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ a*weekly_inc + b*brake_applies,
start = c(0, 0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ a*weekly_inc + b*brake_applies,
start = c(a=0, b=0),
algorithm = "port",
data=df)
summary(model)
model <- nls(percent_change ~ a**weekly_inc + b*brake_applies,
start = c(a=0, b=0),
algorithm = "port",
data=df)
summary(model)
2**3
model <- nls(percent_change ~ a**weekly_inc + b*brake_applies,
start = c(a=2, b=0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ a**weekly_inc + b*brake_applies,
start = c(a=2, b=-1),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies,
start = c(c = 0, a=2, b=-1),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies,
start = c(c = 0, a=1, b=-1),
algorithm = "port",
data=df)
summary(model)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + d*factor(id),
start = c(c = 0, a=1, b=-1, d=0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + factor(id),
start = c(c = 0, a=1, b=-1),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*(id==1001),
start = c(c = 0, a=1, b=-1, g==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*id,
start = c(c = 0, a=1, b=-1, g==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + h*(id==1001),
start = c(c = 0, a=1, b=-1, h==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + tes*(id==1001),
start = c(c = 0, a=1, b=-1,tes==0),
algorithm = "port",
data=df)
summary(model)
model <- nls(percent_change ~ c + a*weekly_inc + b*brake_applies + tes*(id==1001),
start = c(c = 0, a=1, b=-1,tes==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + tes*(id==1001),
start = c(c = 0, a=1, b=-1,tes==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + tes*(id==1001),
start = list(c = 0, a=1, b=-1, tes==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies,
start = list(c = 0, a=1, b=-1, tes==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies,
start = list(c = 0, a=1, b=-1, tes==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies,
start = list(c = 0, a=1, b=-1, tes==0),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + id,
start = list(c = 0, a=1, b=-1),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*id,
start = list(c = 0, a=1, b=-1, g=0),
algorithm = "port",
data=df)
summary(model)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=0),
algorithm = "port",
data=df)
summary(model)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=10),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=2),
algorithm = "port",
data=df)
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=2),
algorithm = "port",
data=df,
controls=list(maxiter=50))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=2),
algorithm = "port",
data=df,
controls=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=2),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=20),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=30),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=10),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=8),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=7),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies + g*days,
start = list(c = 0, a=1, b=-1, g=5),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
model <- nls(percent_change ~ c + a**weekly_inc + b*brake_applies,
start = list(c = 0, a=1, b=-1),
algorithm = "port",
data=df,
control=nls.control(maxiter = 20))
summary(model)
model <- lm(percent_change ~ factor(id) + factor(days)*weekly_inc, data=df)
model <- lm(percent_change ~ factor(id) + factor(days)*weekly_inc + brake_applies, data=df)
summary(model)
stargazer(model, type='text', keep='brake_applies')
stargazer(model, type='text', keep='factor(days)504')
summary(model)
summary(model, max.print=300)
View(summary(model))
View(summary(model)$coefficients)
model <- lm(percent_change ~ factor(id) + factor(days)*poly(weekly_inc, 2) + brake_applies, data=df)
View(summary(model)$coefficients)
stargazer(model, type='text', keep='brake_applies')
for (degree in 1:2){
model.degree <- degree
}
model_1
model.1
models = c()
for (degree in 1:2){
append(models, degree)
}
models
for (degree in 1:2){
models <- c(models, degree)
}
models
for (degree in 1:6){
models <- c(models, degree)
}
models
models = c()
for (degree in 1:6){
model <- lm(percent_change ~ factor(id) + factor(days)*poly(weekly_inc, degree) + brake_applies, data=df)
models <- c(models, model)
}
lapply(1:3, print)
lapply(1:3, print(x))
lapply(1:3, print)
models <- lapply(1:3, make_model)
make_model <- function(degree){
return(lm(percent_change ~ factor(id) + factor(days)*poly(weekly_inc, degree) + brake_applies, data=df))
}
models <- lapply(1:3, make_model)
View(summary(models[0])$coefficients)
View(summary(models[[0]])$coefficients)
View(summary(models[[1]])$coefficients)
View(summary(models[[2]])$coefficients)
summary(models[[1]])$coefficients[['brake_applies']]
summary(models[[1]])$coefficients
stargazer(models, type='text', keep='brake_applies')
models <- lapply(1:6, make_model)
models <- lapply(1:4, make_model)
stargazer(models, type='text', keep='brake_applies')
stargazer(models, type='text', keep='brake_applies', omit.stat = c('f'))
stargazer(models, type='text', keep='brake_applies', omit.stat = c('f', 'ser'))
stargazer(models, type='text', keep='brake_applies', omit.stat = c('f', 'ser'),
add.lines = list(c('degree of interaction polynonial', 1, 2, 3, 4)))
stargazer(models, type='text', keep='brake_applies', omit.stat = c('f', 'ser'),
add.lines = list(c('Degree of Interaction Polynonial', 1, 2, 3, 4),
c('unit FEs', 'Yes', 'Yes', 'Yes', 'Yes')))
stargazer(models, type='latex', keep='brake_applies', omit.stat = c('f', 'ser'),
add.lines = list(c('Degree of Interaction Polynonial', 1, 2, 3, 4),
c('unit FEs', 'Yes', 'Yes', 'Yes', 'Yes')))
summary(models[[1]])$coefficients
View(summary(models[[1]])$coefficients)
hist(df$bucket_day_inc)
hist(df$bucket_inc)
View(df)
unique(df$bucket_inc)
ggplot(df, aes(x=bucket_inc)) + geom_histogram()
ggplot(df, aes(x=bucket_inc)) + geom_histogram(bins=8)
ggplot(df, aes(x=log(bucket_inc))) + geom_histogram(bins=8)
ggplot(df, aes(x=bucket_inc)) + geom_histogram(bins=8)
ggplot(df, aes(x=bucket_inc, color=brake_applies)) + geom_histogram(bins=8)
ggplot(df, aes(x=bucket_inc, color=brake_applies)) + geom_histogram(bins=8, position="dodge")
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies))) + geom_histogram(bins=8, position="dodge")
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies))) + geom_histogram(bins=8, position="dodge", fill=factor(brake_applies))
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=8, position="dodge")
bucket_start <- 50
bucket_size <- 25
get_bucket <- function(inc){
if (inc <= bucket_start){return(0)}
else{return(ceiling((inc - bucket_start) / bucket_size))}
}
df$bucket_inc <- lapply(df$weekly_inc, get_bucket) %>%
as.numeric()
length(unique(df$bucket_inc))
df$bucket_day_inc <- df$days * 1000 + df$bucket_inc
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=8, position="dodge")
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge")
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
ylim(0, 4000)
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
ylim(0, 5000)
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") #+  ylim(0, 5000)
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge", name="abc") #+  ylim(0, 5000)
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
scale_fill_manual(name='abc')
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
scale_fill_manual(name='abc', values=c('blue', 'red'), labels=c('no', 'yes'))
ggplot(df, aes(x=bucket_inc)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
scale_fill_manual(name='abc', values=c('blue', 'red'), labels=c('no', 'yes'))
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
scale_fill_manual(name='abc', labels=c('no', 'yes'))
ggplot(df, aes(x=bucket_inc, color=factor(brake_applies), fill=factor(brake_applies))) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge")
df$Brake = as.boolean(df$brake_applies)
df$Brake = ifelse(df$brake_applies==1, 'Applies', 'Does Not Apply')
ggplot(df, aes(x=bucket_inc, color=factor(Brake), fill=factor(Brake), )) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge")
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge")
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='black'))
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'))
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'),
plot.background = element_rect(fill = "#37474f"))
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'),
plot.background = element_rect(fill = "#37474f"),
legend.background = element_rect(colour = "#37474f"))
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'),
plot.background = element_rect(fill = "#37474f"),
legend.background = element_rect(fill = "#37474f"))
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'),
plot.background = element_rect(fill = "#37474f"),
legend.background = element_rect(fill = "#37474f"),
text = element_text(family = base_family, face = "plain",
colour = "#e0e0e0", size = base_size,
lineheight = 0.9,  hjust = 0.5,
vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE),)
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'),
plot.background = element_rect(fill = "#37474f"),
legend.background = element_rect(fill = "#37474f"),
text = element_text(colour = "#e0e0e0"))
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'),
plot.background = element_rect(fill = "#37474f"),
legend.background = element_rect(fill = "#37474f"),
text = element_text(colour = "#e0e0e0"),
axis.text = element_text(colour = "#e0e0e0"))
ggplot(df, aes(x=bucket_inc, color=Brake, fill=Brake)) +
geom_histogram(bins=length(unique(df$bucket_inc)), position="dodge") +
theme(panel.background = element_rect(fill='#37474f'),
plot.background = element_rect(fill = "#37474f"),
legend.background = element_rect(fill = "#37474f"),
text = element_text(colour = "#e0e0e0"),
axis.text = element_text(colour = "#e0e0e0"))+
xlab('Bucket')
library(plm)
library(did)
library(dplyr)
library(eventstudyr)
library(stargazer)
library(ggplot2)
library(minpack.lm)
df <- read.csv('data/incidence_with_policy_new.csv')
df$percent_change <- c(diff(df$weekly_cases) / lag(df$weekly_cases) * 100)
df$percent_change[is.nan(df$percent_change) | is.infinite(df$percent_change)] <- 0
df$date <- as.Date(df$date, format = "%Y-%m-%d")
df <- filter(df, as.Date('2021/04/01') <= df$date & df$date <= as.Date('2021/07/01'))
df$days <- as.numeric(difftime(df$date, as.Date('2020/01/01')))
df$brake_applies <- as.numeric(df$brake_applies)
df$day <- weekdays(as.Date(df$date))
add_brake_applies_date <- function(county_id){
first_day <- filter(df, id==county_id & brake_applies) %>%
slice(1)
return(first_day$days[1])
}
for (county in unique(df$id)){
df$first_day_of_brake[df$id==county] <- add_brake_applies_date(county)
}
df$days_after_treatment = df$days - df$first_day_of_brake
add_relative_time_dummies <- function(df, before, after){
for(k in -before:-2){
colname <- paste('before', -k, sep="_")
df[, colname] <- df$days_after_treatment == k
}
for(k in 0:after){
colname <- paste('after', k, sep="_")
df[, colname] <- df$days_after_treatment == k
}
df$before_focus_period <- df$days_after_treatment < before
df$after_focus_period <- df$days_after_treatment > after
return(df)
}
add_relative_time_shortened <- function(df, before, after){
df$rel_time <- df$days_after_treatment
df$rel_time[df$rel_time < -before] <- -before - 1
df$rel_time[df$rel_time > after] <- after + 1
#factor omits the smallest value. we want it to omit -1
df$rel_time[df$rel_time == -1] <- -before - 2
return(df)
}
df <- add_relative_time_dummies(df, 5, 5)
df <- add_relative_time_shortened(df, 5, 5)
model <- lm(percent_change ~ factor(id) + factor(bucket_day_inc) + factor(rel_time), data=df)
model <- lm(percent_change ~ factor(id) + factor(days) + factor(rel_time), data=df)
time_vars <- paste("factor(rel_time)", c(-6, -5, -4, -3, -2, 0, 1, 2, 3, 4, 5, 6), sep="")
te_df <- tidy(model)
conf_intervals <- confint(model, level=0.95)
rel_time_estimates <- subset(cbind(te_df, conf_intervals), term %in% time_vars)
rel_time_estimates$rel_time <- c(-6, -5, -4, -3, -2, 0, 1, 2, 3, 4, 5, 6)
colnames(rel_time_estimates)[6] <- "lower"
colnames(rel_time_estimates)[7] <- "upper"
p<- ggplot(rel_time_estimates, aes(x=rel_time, y=estimate)) +
geom_pointrange(aes(ymin=lower, ymax=upper),
position=position_dodge(.9)) +
geom_hline(yintercept=0)
p+labs(title="Effect Size Estimates", x="Event Time", y = "Effect")+
theme_classic()
model <- lm(percent_change ~ factor(id) + factor(days)*weekly_inc + factor(rel_time), data=df)
time_vars <- paste("factor(rel_time)", c(-6, -5, -4, -3, -2, 0, 1, 2, 3, 4, 5, 6), sep="")
te_df <- tidy(model)
conf_intervals <- confint(model, level=0.95)
rel_time_estimates <- subset(cbind(te_df, conf_intervals), term %in% time_vars)
rel_time_estimates$rel_time <- c(-6, -5, -4, -3, -2, 0, 1, 2, 3, 4, 5, 6)
colnames(rel_time_estimates)[6] <- "lower"
colnames(rel_time_estimates)[7] <- "upper"
p<- ggplot(rel_time_estimates, aes(x=rel_time, y=estimate)) +
geom_pointrange(aes(ymin=lower, ymax=upper),
position=position_dodge(.9)) +
geom_hline(yintercept=0)
p+labs(title="Effect Size Estimates", x="Event Time", y = "Effect")+
theme_classic()
model <- lm(percent_change ~ factor(id) + factor(days)*poly(weekly_inc, 2) + factor(rel_time), data=df)
time_vars <- paste("factor(rel_time)", c(-6, -5, -4, -3, -2, 0, 1, 2, 3, 4, 5, 6), sep="")
te_df <- tidy(model)
conf_intervals <- confint(model, level=0.95)
rel_time_estimates <- subset(cbind(te_df, conf_intervals), term %in% time_vars)
rel_time_estimates$rel_time <- c(-6, -5, -4, -3, -2, 0, 1, 2, 3, 4, 5, 6)
colnames(rel_time_estimates)[6] <- "lower"
colnames(rel_time_estimates)[7] <- "upper"
p<- ggplot(rel_time_estimates, aes(x=rel_time, y=estimate)) +
geom_pointrange(aes(ymin=lower, ymax=upper),
position=position_dodge(.9)) +
geom_hline(yintercept=0)
p+labs(title="Effect Size Estimates", x="Event Time", y = "Effect")+
theme_classic()
stargazer(df, type='text')
stargazer(df, type='text', keep=c('weekly_inc'))
stargazer(df, type='text', keep=vars_to_summarize, labels=var_names_pretty)
stargazer(df, type='text', keep=vars_to_summarize, var.labels=var_names_pretty)
stargazer(df, type='text', keep=vars_to_summarize)
vars_to_summarize <- c("weekly_cases", "weekly_inc", 'brake_applies', 'percent_change')
var_names_pretty <- c("Cases In Last 7 Days", "7 Day Incidence", 'Emergency Brake', "Change In Cases")
stargazer(df, type='text', keep=vars_to_summarize)
stargazer(df, type='latex', keep=vars_to_summarize)
